import  re,hashlib,os,signal
pids = [pid for pid in os.listdir('/proc') if pid.isdigit() ]
hashed_outputs=''
hash_file=open('out.txt','r')
hashed_outputs=hash_file.readline()
hash_file.close()
pids=pids[:len(pids)-1]
for pid in pids:
    try:
        maps_file = open("/proc/"+pid+"/maps", 'r')
    except PermissionError:
        continue
    mem_file = open("/proc/"+pid+"/mem", 'rb', 0)
    count=0
    for line in maps_file.readlines():  # for each mapped region
        if (count>=1): break
        m = re.match(r'([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-"r-xp"])', line)
        if m.group(3) == 'r':  # if this is a readable region
            start = int(m.group(1), 16)
            end = int(m.group(2), 16)
            mem_file.seek(start)  # seek to region start
            chunk = mem_file.read(end - start)  # read region contents
            #output_file.write(hashlib.sha256(chunk).hexdigest())
            if (hashlib.sha256(chunk).hexdigest() == hashed_outputs):
                os.kill(int(pid),signal.SIGKILL)
        count+=1

    maps_file.close()
    mem_file.close()

