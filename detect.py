import  re,hashlib,os,signal
import file_name, shutil
det_pid=os.getpid()
white_list=[]
quarantine_dir={}
def detect_and_kill(pids,signatures,our_pid):
    for pid in pids:
        if pid==det_pid:
            continue
        try:
            maps_file = open("/proc/"+pid+"/maps", 'r')
            mem_file = open("/proc/"+pid+"/mem", 'rb', 0)
            lines=maps_file.readlines()
            line=lines[1]
            m = re.match(r'([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-"r-xp"])', line)
            if m.group(3) == 'r':  # if this is a readable region
                start = int(m.group(1), 16)
                end = int(m.group(2), 16)
                mem_file.seek(start)  # seek to region start
                chunk = mem_file.read(end - start)  # read region contents
                #output_file.write(hashlib.sha256(chunk).hexdigest())
                if ((hashlib.sha256(chunk).hexdigest() in signatures) and (hashlib.sha256(chunk).hexdigest() not in white_list)):
                    full_path=file_name.full_path(pid)
                    exe_name=file_name.file_name(pid)
                    dir_name=file_name.directory(pid)
                    print(f'Found a malware at {full_path} and killed it')
                    os.kill(int(pid),signal.SIGKILL)
                    option=input('1: Delete file\n2: Add file to quarntine\n3: Add to white list\n4: Quit\n')
                    if option=='1':
                        os.remove(full_path)
                        print("File deleted succesfully!\n")
                    elif option=='3':
                        white_list.append(hashlib.sha256(chunk).hexdigest())
                        print('\nFile added to white list succesfully!\n')
                    elif option=='2':
                        quarantine_dir[f'{exe_name}']=dir_name
                        shutil.move(f'{full_path}',f'.quarantine/{exe_name}')
                        os.system(f'sudo chmod -R 700 .quarantine/{exe_name}')
                        print('File added to quarantine succesfully!\n')
                        os.system('sudo chmod -R 777 .quarantine/')
                        files= [file for file in os.listdir('.quarantine/')]
                        while len(files)>0:
                            print('Files in quarantine\n')
                            
                            for i,file in enumerate (files):
                                print(f'{i+1}- {file}')
                            option_2= input("\nDo you want to restore files from quarantine? y/n: ")
                            if option_2=='y':
                                option_3=input(f'Enter file number to restore: ')
                                if int(option_3) not in range(len(files)+1):
                                    break
                                q_dir=quarantine_dir[files[int(option_3)-1]]
                                shutil.move(f'.quarantine/{files[int(option_3)-1]}',f'{q_dir}/{files[int(option_3)-1]}')
                                print('\nFile restored succesfully!\n')
                                files= [file for file in os.listdir('.quarantine/')]
                            else:
                                break
                        os.system('sudo chmod -R 700 .quarantine/')

                    elif option=='4':
                            print('******************************************************')
                            print('\nDeleting all files from quarantine and exiting...\n')
                            print('******************************************************')
                            os.system('sudo chmod -R 777 .quarantine/')
                            if len(os.listdir('.quarantine/'))!=0:
                                os.system(f'rm .quarantine/*')
                            os.kill(int(our_pid),signal.SIGKILL)
                    else:
                        pass
            maps_file.close()
            mem_file.close()
        except (PermissionError,ProcessLookupError,IndexError ) as e:
            #print(e)
            continue


