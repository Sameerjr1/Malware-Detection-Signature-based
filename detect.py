import  re,hashlib,os,signal
import file_name
det_pid=os.getpid()
white_list=[]

def detect_and_kill(pids,signatures,our_pid):
    for pid in pids:
        if pid==det_pid:
            continue
        try:
            maps_file = open("/proc/"+pid+"/maps", 'r')
            mem_file = open("/proc/"+pid+"/mem", 'rb', 0)
            lines=maps_file.readlines()
            line=lines[1]
            m = re.match(r'([0-9A-Fa-f]+)-([0-9A-Fa-f]+) ([-"r-xp"])', line)
            if m.group(3) == 'r':  # if this is a readable region
                start = int(m.group(1), 16)
                end = int(m.group(2), 16)
                mem_file.seek(start)  # seek to region start
                chunk = mem_file.read(end - start)  # read region contents
                #output_file.write(hashlib.sha256(chunk).hexdigest())
                if ((hashlib.sha256(chunk).hexdigest() in signatures) and (hashlib.sha256(chunk).hexdigest() not in white_list)):
                    full_path=file_name.full_path(pid)
                    print(f'Found a malware at {full_path} and killed it')
                    os.kill(int(pid),signal.SIGKILL)
                    option=input('1: Delete file\n2: Add to white list\n3: Pass\n')
                    if option=='1':
                        os.remove(full_path)
                        print("File deleted succesfully!")
                    elif option=='2':
                        white_list.append(hashlib.sha256(chunk).hexdigest())
                        print('File added to white list succesfully!')
                    else:
                        pass
            maps_file.close()
            mem_file.close()
        except (PermissionError,ProcessLookupError ) as e:
            #print(e)
            continue


